import { Farm } from "./schemes";
import Ajv, { ErrorObject, ValidationError } from "ajv";
import FarmScheme from "./FarmScheme.json";

const ajv = new Ajv();

export default function useCurrent(): number | 0{
    const params = new URLSearchParams(window.location.search);
    const currentFarm = params.get("farm");
    return currentFarm? parseInt(currentFarm) : 0;
} // need to further implement


export function getFarms(): Farm[] {
    const farms = localStorage.getItem('farms'); // farms array or empty array
    return farms? JSON.parse(farms) : [];
}

export const emptyFarm = {
  name: 'farm1',
  level: 0,
  items: {
      bolt: 0,
      plank: 0,
      tape: 0,
      nails: 0,
      screw: 0,
      panel: 0,
      deed: 0,
      mallet: 0,
      marker: 0,
      dynamite: 0,
      tnt: 0,
      shovel: 0,
      pick: 0,
      axe: 0,
      saw: 0
  }
}

// generated by claude 3.5 sonnet
export const ChartColors = [
    '#4ECDC4', // Bright Turquoise
    '#FF6B6B', // Coral Pink
    '#FFA500', // Orange
    '#45B7D1', // Sky Blue
    '#98D8C8', // Mint Green
    '#F7F779', // Pale Yellow
    '#C06C84', // Mauve
    '#6C5B7B', // Deep Lavender
    '#35A79C', // Teal
    '#F2C14E', // Golden Yellow
    '#FF8C42', // Dark Orange
    '#7B92AA', // Steel Blue
    '#95E1D3', // Aquamarine
    '#E84A5F', // Bright Red
    '#A8E6CF'  // Light Mint
  ];
// Fisher-Yates Shuffling Algorithm
export const shuffle = (array: string[]) => {
  const shuffled = [...array];
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}; 
export function isValidFarm(data: object): boolean{
  const validate = ajv.compile(FarmScheme);
  const valid = validate(data);
  if (!valid) throw new ValidationError(validate.errors as Partial<ErrorObject>[]);
  return valid;
}